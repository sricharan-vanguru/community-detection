%%cu
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
struct bound
{
int low; int high;
};
__device__ struct bound stack[100];
__device__ int top = -1;
__device__ void push(int m, int high)
{
if (top < 99)
{
top ++;
struct bound b;
b.low = m + 1;
b.high = high;
stack[top] = b;
}
else
{
printf("Stack overflow\n");
}
}
__device__ struct bound pop()
{
struct bound poped;
if (top >= 0)
{
poped = stack[top];
top --;
return poped;
}
else

{
/*
printf("%d\n", top);
printf("Stack underflow\n");
*/
//exit(0);
}
return poped;
}
__device__ int partition(int *arr, int low, int high)
{
int pivot = arr[high];
int i = low - 1;
for (int j = low; j <= high - 1; j ++)
{
if (arr[j] < pivot)
{
i ++;
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
int temp = arr[i + 1];
arr[i + 1] = arr[high];
arr[high] = temp;
return i + 1;
}
__global__ void initialPush()
{
struct bound b;
b.low = 0;
b.high = 7;
stack[0] = b;
top ++;
}
__device__ int sorted = 0;
__global__ void parallel_quicksort(int *arr)
{
struct bound bounds;
int median;
while (sorted < 8)

{
bounds = pop();
//printf("\nSorted: %d\n", sorted);

while (bounds.low < bounds.high)
{
if (bounds.high - bounds.low <= 2)
{
//Insertion sort
int i, key, j;
for (i = bounds.low; i <= bounds.high; i++) {
key = arr[i];
j = i - 1;
while (j >= 0 && arr[j] > key) {
arr[j + 1] = arr[j];
j = j - 1;
}
arr[j + 1] = key;
}
sorted += bounds.high - bounds.low + 1;
break;
}
else
{
median = partition(arr, bounds.low, bounds.high);
push(median + 1, bounds.high);
bounds.high = median - 1;
if (bounds.low == bounds.high)
{
sorted += 2;
}
else
{
sorted += 1;
}
}
}
if (top == -1)

break;
}
}
int main() {
int size = 8;
int *arr = (int *) malloc(size * sizeof(int));;
arr[0] = 2; arr[1] = 5; arr[2] = 10; arr[3] = 12;
arr[4] = 1; arr[5] = 20; arr[6] = 7; arr[7] = 11;
int *device_arr;
cudaMalloc((void **)&device_arr, sizeof(int) * size);
cudaMemcpy(device_arr, arr, sizeof(int) * size, cudaMemcpyHostToDevice);
initialPush<<<1,1>>>();
dim3 grid(1);
dim3 block(size);
parallel_quicksort<<<grid, block>>>(device_arr);
cudaDeviceSynchronize();
cudaMemcpy(arr, device_arr, size * sizeof(int), cudaMemcpyDeviceToHost);
printf("Sorted Array is:\t");
for (int i = 0; i < size; i ++)
{
printf("%d\t", arr[i]);
}
printf("\n");
free(arr);
cudaFree(device_arr);
}